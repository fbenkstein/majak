// automatically generated by the FlatBuffers compiler, do not modify

#ifndef FLATBUFFERS_GENERATED_BUILDLOG_NINJA_H_
#define FLATBUFFERS_GENERATED_BUILDLOG_NINJA_H_

#include "flatbuffers/flatbuffers.h"

namespace ninja {

struct BuildLogEntry;
struct BuildLogEntryT;

struct BuildLogEntryT : public flatbuffers::NativeTable {
  typedef BuildLogEntry TableType;
  std::string output;
  uint64_t command_hash;
  uint32_t start_time;
  uint32_t end_time;
  uint64_t mtime;
  BuildLogEntryT() : command_hash(0), start_time(0), end_time(0), mtime(0) {}
};

struct BuildLogEntry FLATBUFFERS_FINAL_CLASS : private flatbuffers::Table {
  typedef BuildLogEntryT NativeTableType;
  enum {
    VT_OUTPUT = 4,
    VT_COMMAND_HASH = 6,
    VT_START_TIME = 8,
    VT_END_TIME = 10,
    VT_MTIME = 12
  };
  /// Name of the output.
  const flatbuffers::String *output() const {
    return GetPointer<const flatbuffers::String *>(VT_OUTPUT);
  }
  /// Hash off the command.
  uint64_t command_hash() const {
    return GetField<uint64_t>(VT_COMMAND_HASH, 0);
  }
  /// Time from the start of the build that this command was started.
  uint32_t start_time() const { return GetField<uint32_t>(VT_START_TIME, 0); }
  /// Time from the start of the build that this command finished.
  uint32_t end_time() const { return GetField<uint32_t>(VT_END_TIME, 0); }
  /// Timestamp of the output.
  uint64_t mtime() const { return GetField<uint64_t>(VT_MTIME, 0); }
  bool Verify(flatbuffers::Verifier &verifier) const {
    return VerifyTableStart(verifier) &&
           VerifyOffsetRequired(verifier, VT_OUTPUT) &&
           verifier.Verify(output()) &&
           VerifyField<uint64_t>(verifier, VT_COMMAND_HASH) &&
           VerifyField<uint32_t>(verifier, VT_START_TIME) &&
           VerifyField<uint32_t>(verifier, VT_END_TIME) &&
           VerifyField<uint64_t>(verifier, VT_MTIME) && verifier.EndTable();
  }
  BuildLogEntryT *UnPack(
      const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  void UnPackTo(
      BuildLogEntryT *_o,
      const flatbuffers::resolver_function_t *_resolver = nullptr) const;
  static flatbuffers::Offset<BuildLogEntry> Pack(
      flatbuffers::FlatBufferBuilder &_fbb, const BuildLogEntryT *_o,
      const flatbuffers::rehasher_function_t *_rehasher = nullptr);
};

struct BuildLogEntryBuilder {
  flatbuffers::FlatBufferBuilder &fbb_;
  flatbuffers::uoffset_t start_;
  void add_output(flatbuffers::Offset<flatbuffers::String> output) {
    fbb_.AddOffset(BuildLogEntry::VT_OUTPUT, output);
  }
  void add_command_hash(uint64_t command_hash) {
    fbb_.AddElement<uint64_t>(BuildLogEntry::VT_COMMAND_HASH, command_hash, 0);
  }
  void add_start_time(uint32_t start_time) {
    fbb_.AddElement<uint32_t>(BuildLogEntry::VT_START_TIME, start_time, 0);
  }
  void add_end_time(uint32_t end_time) {
    fbb_.AddElement<uint32_t>(BuildLogEntry::VT_END_TIME, end_time, 0);
  }
  void add_mtime(uint64_t mtime) {
    fbb_.AddElement<uint64_t>(BuildLogEntry::VT_MTIME, mtime, 0);
  }
  explicit BuildLogEntryBuilder(flatbuffers::FlatBufferBuilder &_fbb)
      : fbb_(_fbb) {
    start_ = fbb_.StartTable();
  }
  BuildLogEntryBuilder &operator=(const BuildLogEntryBuilder &);
  flatbuffers::Offset<BuildLogEntry> Finish() {
    const auto end = fbb_.EndTable(start_);
    auto o = flatbuffers::Offset<BuildLogEntry>(end);
    fbb_.Required(o, BuildLogEntry::VT_OUTPUT);
    return o;
  }
};

inline flatbuffers::Offset<BuildLogEntry> CreateBuildLogEntry(
    flatbuffers::FlatBufferBuilder &_fbb,
    flatbuffers::Offset<flatbuffers::String> output = 0,
    uint64_t command_hash = 0, uint32_t start_time = 0, uint32_t end_time = 0,
    uint64_t mtime = 0) {
  BuildLogEntryBuilder builder_(_fbb);
  builder_.add_mtime(mtime);
  builder_.add_command_hash(command_hash);
  builder_.add_end_time(end_time);
  builder_.add_start_time(start_time);
  builder_.add_output(output);
  return builder_.Finish();
}

inline flatbuffers::Offset<BuildLogEntry> CreateBuildLogEntryDirect(
    flatbuffers::FlatBufferBuilder &_fbb, const char *output = nullptr,
    uint64_t command_hash = 0, uint32_t start_time = 0, uint32_t end_time = 0,
    uint64_t mtime = 0) {
  return ninja::CreateBuildLogEntry(_fbb,
                                    output ? _fbb.CreateString(output) : 0,
                                    command_hash, start_time, end_time, mtime);
}

flatbuffers::Offset<BuildLogEntry> CreateBuildLogEntry(
    flatbuffers::FlatBufferBuilder &_fbb, const BuildLogEntryT *_o,
    const flatbuffers::rehasher_function_t *_rehasher = nullptr);

inline BuildLogEntryT *BuildLogEntry::UnPack(
    const flatbuffers::resolver_function_t *_resolver) const {
  auto _o = new BuildLogEntryT();
  UnPackTo(_o, _resolver);
  return _o;
}

inline void BuildLogEntry::UnPackTo(
    BuildLogEntryT *_o,
    const flatbuffers::resolver_function_t *_resolver) const {
  (void)_o;
  (void)_resolver;
  {
    auto _e = output();
    if (_e)
      _o->output = _e->str();
  };
  {
    auto _e = command_hash();
    _o->command_hash = _e;
  };
  {
    auto _e = start_time();
    _o->start_time = _e;
  };
  {
    auto _e = end_time();
    _o->end_time = _e;
  };
  {
    auto _e = mtime();
    _o->mtime = _e;
  };
}

inline flatbuffers::Offset<BuildLogEntry> BuildLogEntry::Pack(
    flatbuffers::FlatBufferBuilder &_fbb, const BuildLogEntryT *_o,
    const flatbuffers::rehasher_function_t *_rehasher) {
  return CreateBuildLogEntry(_fbb, _o, _rehasher);
}

inline flatbuffers::Offset<BuildLogEntry> CreateBuildLogEntry(
    flatbuffers::FlatBufferBuilder &_fbb, const BuildLogEntryT *_o,
    const flatbuffers::rehasher_function_t *_rehasher) {
  (void)_rehasher;
  (void)_o;
  struct _VectorArgs {
    flatbuffers::FlatBufferBuilder *__fbb;
    const BuildLogEntryT *__o;
    const flatbuffers::rehasher_function_t *__rehasher;
  } _va = { &_fbb, _o, _rehasher };
  (void)_va;
  auto _output = _fbb.CreateString(_o->output);
  auto _command_hash = _o->command_hash;
  auto _start_time = _o->start_time;
  auto _end_time = _o->end_time;
  auto _mtime = _o->mtime;
  return ninja::CreateBuildLogEntry(_fbb, _output, _command_hash, _start_time,
                                    _end_time, _mtime);
}

}  // namespace ninja

#endif  // FLATBUFFERS_GENERATED_BUILDLOG_NINJA_H_
